/**
 * This file was generated by kysely-codegen.
 * Please do not edit it manually.
 */

import type { ColumnType } from "kysely";

export type Generated<T> = T extends ColumnType<infer S, infer I, infer U>
  ? ColumnType<S, I | undefined, U>
  : ColumnType<T, T | undefined, T>;

export type Json = JsonValue;

export type JsonArray = JsonValue[];

export type JsonObject = {
  [x: string]: JsonValue | undefined;
};

export type JsonPrimitive = boolean | number | string | null;

export type JsonValue = JsonArray | JsonObject | JsonPrimitive;

export interface Groups {
  amenities: Generated<Json>;
  id: string;
  mapID: string | null;
  name: string;
  parentID: string;
}

export interface Options {
  id: string;
  value: Json | null;
}

export interface Reservations {
  allow: Generated<boolean>;
  begin: number | null;
  date: string;
  end: number;
  exit: number | null;
  reason: string | null;
  rid: string;
  start: number;
  uid: string;
}

export interface Resources {
  access: Generated<number>;
  amenities: Json | null;
  availability: Generated<boolean | null>;
  id: string;
  mapID: string;
  name: string | null;
  parentID: string;
  rtype: string;
}

export interface ResourceType {
  access: Generated<number>;
  id: string;
  name: string;
}

export interface Users {
  access: Generated<number>;
  id: string;
  name: string | null;
  role: Generated<string | null>;
  time: Generated<number>;
}

export interface DB {
  Groups: Groups;
  Options: Options;
  Reservations: Reservations;
  Resources: Resources;
  ResourceType: ResourceType;
  Users: Users;
}
